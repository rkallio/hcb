#+todo: TODO | DONE

* Table of contents                                                     :TOC:
- [[#the-assignment][The assignment]]
  - [[#the-exercise][The exercise]]
  - [[#stuff-to-do][Stuff to do]]
  - [[#functional-requirements][Functional requirements]]
    - [[#data-import][Data import]]
    - [[#journey-list-view][Journey list view]]
    - [[#station-list][Station list]]
    - [[#single-station-view][Single station view]]
    - [[#surprise-us-with][Surprise us with]]
- [[#requirements][Requirements]]
  - [[#must][Must]]
    - [[#implement-the-software-product-the-app-as-a-cloud-native-application][Implement the software product (“The app”) as a cloud native application]]
    - [[#software-delivered-as-cloud-run-containers][Software delivered as Cloud run containers]]
    - [[#build-and-deploy-the-app-using-cloud-build][Build and deploy the app using Cloud build]]
    - [[#store-and-deliver-static-assets-from-cloud-storage][Store and deliver static assets from Cloud Storage]]
    - [[#implement-end-to-end-tests][Implement end-to-end tests]]
    - [[#the-frontend-04][The frontend]]
  - [[#should][Should]]
    - [[#the-frontend-03][The frontend]]
  - [[#could][Could]]
  - [[#wish][Wish]]
    - [[#run-automated-tests-in-gcp][Run automated tests in GCP]]
    - [[#endpoints-to-store-new-journeys-data-or-new-bicycle-stations][Endpoints to store new journeys data or new bicycle stations]]
    - [[#the-frontend][The frontend]]
    - [[#create-ui-for-adding-journeys-or-bicycle-stationc][Create UI for adding journeys or bicycle stationc]]
- [[#resources][Resources]]
  - [[#assignment-requirements-specification][Assignment, requirements specification]]
  - [[#academy-homepage][Academy homepage]]
  - [[#tips][Tips]]
  - [[#datasets][Datasets]]
    - [[#journey-dataset][Journey dataset]]
    - [[#bicycle-station-dataset][Bicycle station dataset]]
  - [[#contacts][Contacts]]
    - [[#project-contact][Project contact]]
    - [[#dataset-contacts][Dataset contacts]]
- [[#minutes--journal][Minutes & Journal]]
  - [[#get-acquainted-with-the-project-assignment][Get acquainted with the project assignment]]
  - [[#collect-requirements][Collect requirements]]
  - [[#explore-the-dataset][Explore the dataset]]
  - [[#write-first-implementation-of-frontend][Write first implementation of frontend]]
- [[#implementation][Implementation]]
  - [[#the-frontend-1][The frontend]]
    - [[#python-boilerplate][Python boilerplate]]
    - [[#tests][Tests]]
    - [[#code][Code]]
  - [[#the-backend][The backend]]
  - [[#the-database][The database]]
  - [[#the-datapump][The datapump]]
  - [[#the-map-frontend][The map frontend]]

* The assignment

Text here lifted from the [[id:40872028-9B66-4C60-BCEA-0F8D427CBF74][repository]].

** The exercise

Create a *web application* that uses a *backend service* to fetch the data. *Backend* can be made with any technology. We at Solita use for example (not in preference order) Java/Kotlin/Clojure/C#/TypeScript/Go but you are free to choose any other technology as well.

Backend can use a database, or it can be memory-based. *Real database use is a preferable* choice because it allows you to show broader skills. Also, the datasets are quite big so in-memory operations may be quite slow.

You can also freely choose the frontend (and possibly mobile frontend) technologies to use. The important part is to give good instructions on how to build and run the project.

** Stuff to do

Important! Implementing all of the proposed features is not needed for a good exercise result. You may also concentrate on:

+ Good documentation (readme/other docs)
+ Proper git usage (small commits, informative commit messages)
+ Tests
+ Getting features complete
+ Writing good code
+ Which are all highly valued in a good repository.

** Functional requirements

Focus on the recommended features. For extra points, you might want to also complete some additional features. You can also come up with extra features, if you do, please document them in the readme!

*** Data import

**** Recommended

*****  Import data from the CSV files to a database or in-memory storage

***** Validate data before importing

***** Don't import journeys that lasted for less than ten seconds

***** Don't import journeys that covered distances shorter than 10 meters

*** Journey list view
:PROPERTIES:
:ID:       3021535E-D457-4E21-B296-4035BCE2E439
:END:

**** Recommended

***** List journeys
:PROPERTIES:
:ID:       B4893559-616F-40BF-921F-7D317A7A3233
:END:

If you don't implement pagination, use some hard-coded limit for the list length because showing several million rows would make any browser choke

***** For each journey show departure and return stations, covered distance in kilometers and duration in minutes
:PROPERTIES:
:ID:       9C02BABD-4912-400F-91BE-7ACE4403DE58
:END:

**** Additional
:PROPERTIES:
:ID:       7DC9F915-F042-4FD0-8B35-F1CB41822661
:END:

***** Pagination
:PROPERTIES:
:ID:       C3F75C9E-BF89-4BA2-8FF9-6A0834A5FD9C
:END:

***** Ordering per column
:PROPERTIES:
:ID:       E0C31B66-06FB-41CE-997D-B0C7263C453C
:END:

***** Searching
:PROPERTIES:
:ID:       46BC5278-F5AE-4111-81CE-FABBBBDF2CCC
:END:

***** Filtering
:PROPERTIES:
:ID:       E59913C7-F2CA-46EB-BDF2-F6DDC2DEFCDE
:END:

*** Station list
:PROPERTIES:
:ID:       89C5ADDA-6E9D-485B-877F-2A47D765789A
:END:

**** Recommended
:PROPERTIES:
:ID:       560F2659-2E0A-43CC-B784-071D774D9305
:END:

***** List all the stations
:PROPERTIES:
:ID:       2E7F4555-4A42-4A5F-96CD-B917DED9F27F
:END:

**** Additional
:PROPERTIES:
:ID:       501D1AFF-D0DE-4C8F-9557-CFF81447EA1C
:END:

***** Pagination
:PROPERTIES:
:ID:       57A6951C-D5B4-4ABE-90CC-9737DB955055
:END:

***** Searching
:PROPERTIES:
:ID:       1A851198-298A-417B-9E16-091C0F722A69
:END:

*** Single station view
:PROPERTIES:
:ID:       8B7AC0C5-E098-401C-936F-9B8AA51B8AB4
:END:

**** Recommended
:PROPERTIES:
:ID:       3FE0134F-3D02-44E6-B340-28C7100F2AEA
:END:

***** Station name
:PROPERTIES:
:ID:       A85600E0-7208-4CA2-98A5-C7B4AB286607
:END:

***** Station address
:PROPERTIES:
:ID:       EDD7F112-7D78-4308-AEBB-EBB652CF1E19
:END:

***** Total number of journeys starting from the station
:PROPERTIES:
:ID:       8DC3256B-CE71-4C5D-98F8-620F56EA6A4D
:END:

***** Total number of journeys ending at the station
:PROPERTIES:
:ID:       BF6F35A7-ADFF-473D-9A84-03CA5A7EB6A3
:END:

**** Additional
:PROPERTIES:
:ID:       54FF5C21-84E5-452A-A254-1038B45C98B0
:END:

***** Station location on the map
:PROPERTIES:
:ID:       32E8AD8C-7075-41E2-857A-3028E260F2A0
:END:

***** The average distance of a journey starting from the station
:PROPERTIES:
:ID:       BE865AC1-498E-4211-B2E3-D0E6E5748D14
:END:

***** The average distance of a journey ending at the station
:PROPERTIES:
:ID:       9CE27BCA-212A-4652-926E-0A19EF9B41B4
:END:

***** Top 5 most popular return stations for journeys starting from the station
:PROPERTIES:
:ID:       D42F365F-AF8D-42DC-8BD9-569C7CE7A633
:END:

***** Top 5 most popular departure stations for journeys ending at the station
:PROPERTIES:
:ID:       3A44653C-D103-493F-B9BC-E5FD1114E582
:END:

***** Ability to filter all the calculations per month
:PROPERTIES:
:ID:       FC0D1A36-1AC4-4062-BE61-778E63EEAB71
:END:

*** Surprise us with

**** Endpoints to store new journeys data or new bicycle stations
:PROPERTIES:
:ID:       0E3E7F1C-06BC-4E1D-BD78-070E8C6318BC
:END:

**** Running backend in Docker

**** Running backend in Cloud

**** Implement E2E tests

**** Create UI for adding journeys or bicycle stations
:PROPERTIES:
:ID:       4105F08E-4AE4-4A2F-BB4F-EC9C9F9B275B
:END:

* Requirements

This section defines the requirements by importance as defined by me.  The requirements defined in the [[id:6893CF22-FA13-475C-89DE-36E7E2B33128][must]] section must be implemented for me to return the assignment.  I will be happy if everything in the [[id: 1DB8A845-6E20-4E41-86CF-12F6496ED110][should]] section is implemented.  Implementing any item in the [[id:7FDED9CD-5D9A-4F4E-8726-86548002F5E5][could]] section is very low priority, and will likely only be done if the effort to do so is very low.

** Must
:PROPERTIES:
:ID:       6893CF22-FA13-475C-89DE-36E7E2B33128
:END:

*** TODO Implement the software product (“The app”) as a cloud native application

All the pieces that make up “the app” must run on server’s provided by GCP.

*** TODO Software delivered as Cloud run containers

Any piece of custom software must be deployable as a containerized app using cloud run.

*** TODO Build and deploy the app using Cloud build

*** TODO Store and deliver static assets from Cloud Storage

*** TODO Implement end-to-end tests

*** TODO The frontend [0/4]
:PROPERTIES:
:ID:       1659CF90-34E8-4D6B-BBC8-B347089D2089
:END:

**** TODO List journeys

See [[id:B4893559-616F-40BF-921F-7D317A7A3233]].

**** TODO For each journey, show [0/3]

Details: [[id:9C02BABD-4912-400F-91BE-7ACE4403DE58]].

***** TODO Departure and return stations

***** TODO Covered distance in kilometers

***** TODO Duration in minutes

**** TODO Station list [0/1]

See [[id:560F2659-2E0A-43CC-B784-071D774D9305]].

***** TODO List all the stations

See [[id:2E7F4555-4A42-4A5F-96CD-B917DED9F27F]].

**** TODO Single station view [0/4]

See [[id:3FE0134F-3D02-44E6-B340-28C7100F2AEA]].

***** TODO Station name

See [[id:A85600E0-7208-4CA2-98A5-C7B4AB286607]].

***** TODO Station address

See [[id:EDD7F112-7D78-4308-AEBB-EBB652CF1E19]].

***** TODO Total number of journeys starting from the station

See [[id:8DC3256B-CE71-4C5D-98F8-620F56EA6A4D]].

***** TODO Total number of journeys ending at the station

See [[id:BF6F35A7-ADFF-473D-9A84-03CA5A7EB6A3]].

** Should
:PROPERTIES:
:ID:       1DB8A845-6E20-4E41-86CF-12F6496ED110
:END:

*** TODO The frontend [0/3]
:PROPERTIES:
:ID:       27D03FC8-96B7-4F0B-94C0-A1E027CBADB0
:END:

**** TODO List journeys [0/4]

See [[id:7DC9F915-F042-4FD0-8B35-F1CB41822661]].

***** TODO Implement paginatioin

See [[id:C3F75C9E-BF89-4BA2-8FF9-6A0834A5FD9C]].

***** TODO Implement ordering per column

See [[id:E0C31B66-06FB-41CE-997D-B0C7263C453C]].

***** TODO Searching

See [[id:46BC5278-F5AE-4111-81CE-FABBBBDF2CCC]].

***** TODO Filtering

See [[id:E59913C7-F2CA-46EB-BDF2-F6DDC2DEFCDE]].

**** TODO Station list [0/2]

See [[id:501D1AFF-D0DE-4C8F-9557-CFF81447EA1C]].

***** TODO Pagination

See [[id:57A6951C-D5B4-4ABE-90CC-9737DB955055]].

***** TODO Searching

See [[id:1A851198-298A-417B-9E16-091C0F722A69]].

**** TODO Single station view [0/6]

See [[id:54FF5C21-84E5-452A-A254-1038B45C98B0]].

***** TODO Station location on the map(!)

See [[id:32E8AD8C-7075-41E2-857A-3028E260F2A0]].

This seems like a very big task, as it is the only requirement in the assignment that references an actual map

***** TODO Average distance of a journey starting from the station

See [[id:BE865AC1-498E-4211-B2E3-D0E6E5748D14]].

***** TODO Average distance of a journey ending at the station

See [[id:9CE27BCA-212A-4652-926E-0A19EF9B41B4]].

***** TODO 5 most popular return stations jor journeys starting from the station

See [[id:D42F365F-AF8D-42DC-8BD9-569C7CE7A633]].

***** TODO 5 most popular departure stations jor journeys ending at the station

See [[id:3A44653C-D103-493F-B9BC-E5FD1114E582]].

***** TODO Ability fo filter all the calculations per month

See [[id:FC0D1A36-1AC4-4062-BE61-778E63EEAB71]].

** Could
:PROPERTIES:
:ID:       7FDED9CD-5D9A-4F4E-8726-86548002F5E5
:END:

** Wish

*** TODO Run automated tests in GCP

This is a nice to have feature, but not necessary, as breakage after deploys is not world ending.  It also is not a functional requirement.

*** TODO Endpoints to store new journeys data or new bicycle stations

See [[id:0E3E7F1C-06BC-4E1D-BD78-070E8C6318BC]].

*** The frontend
:PROPERTIES:
:ID:       B1773244-DBCA-4154-92DB-54D718912754
:END:

*** TODO Create UI for adding journeys or bicycle stationc

See [[id:4105F08E-4AE4-4A2F-BB4F-EC9C9F9B275B]].

* Resources

** Assignment, requirements specification
:PROPERTIES:
:ID:       40872028-9B66-4C60-BCEA-0F8D427CBF74
:END:

[[https://github.com/solita/dev-academy-2023-exercise]]

** Academy homepage

[[https://www.solita.fi/positions/dev-academy-to-boost-your-software-developer-career-5202331003/]]

** Tips

+ [[https://dev.solita.fi/2021/11/04/how-to-pre-assignments.html][Do’s and Dont’s of pre-assignments]]
+ [[https://dev.solita.fi/2023/03/24/how-to-pre-assignments-2.html][Do's and Don'ts of Dev Academy Pre-assignments – Revisited]]
+ [[https://dev.solita.fi/2022/11/01/testing-primer-dev-academy.html][Testing Primer]] – tips on how to test your application

** Datasets

*** Journey dataset

Contact information for the dataset: [[id:749A080A-801E-4BB1-A8B6-6F4FAC42BE4F]].

+ [[https://dev.hsl.fi/citybikes/od-trips-2021/2021-05.csv]]
+ [[https://dev.hsl.fi/citybikes/od-trips-2021/2021-06.csv]]
+ [[https://dev.hsl.fi/citybikes/od-trips-2021/2021-07.csv]]

*** Bicycle station dataset

+ Data: [[https://opendata.arcgis.com/datasets/726277c507ef4914b0aec3cbcfcbfafc_0.csv]]
+ License information: [[https://www.avoindata.fi/data/en/dataset/hsl-n-kaupunkipyoraasemat/resource/a23eef3a-cc40-4608-8aa2-c730d17e8902]]

** Contacts

*** Project contact

[[mailto:pauliinahovila@solita.fi]]

*** Dataset contacts
:PROPERTIES:
:ID:       749A080A-801E-4BB1-A8B6-6F4FAC42BE4F
:END:

+ [[mailto:heikki.hamalainen@solita.fi]]
+ [[mailto:meri.merkkiniemi@solita.fi]]

* Minutes & Journal

** Get acquainted with the project assignment
:LOGBOOK:
CLOCK: [2023-04-01 Sat 20:10]--[2023-04-01 Sat 20:40] =>  0:30
:END:

** Collect requirements
:LOGBOOK:
CLOCK: [2023-04-02 Sun 09:04]--[2023-04-02 Sun 09:37] =>  0:33
CLOCK: [2023-04-01 Sat 20:41]--[2023-04-01 Sat 21:14] =>  0:33
:END:

** Explore the dataset
:PROPERTIES:
:header-args: :noweb yes
:END:
:LOGBOOK:
CLOCK: [2023-04-02 Sun 09:38]--[2023-04-02 Sun 10:05] =>  0:27
CLOCK: [2023-04-01 Sat 22:51]--[2023-04-01 Sat 23:46] =>  0:55
CLOCK: [2023-04-01 Sat 22:29]--[2023-04-01 Sat 22:38] =>  0:09
CLOCK: [2023-04-01 Sat 21:15]--[2023-04-01 Sat 22:17] =>  1:02
:END:

The journey dataset consists of three files, one file for the data of one month.

CSV header defines the following fields:
+ Departure
+ Return
+ Departure station id
+ Departure station name
+ Return station id
+ Return station name
+ Covered distance (m)
+ Duration (sec)

AKA this thing:

#+name: JourneyRecordTuple
#+begin_src python
from collections import namedtuple

JourneyRecord = namedtuple(
    'JourneyRecord',
    'departure_time,return_time,departure_id,departure_name,return_id,return_name,distance,duration'
)
#+end_src

#+header: :cache yes
#+header: :dir ../dataset/
#+begin_src python
import csv

f = '2021-05.csv'

<<JourneyRecordTuple>>

reader = csv.reader(open(f, 'r'))
# skip the header
next(reader)
print(list(map(JourneyRecord._make, reader))[1:2])
#+end_src

#+RESULTS[2684a09d41a676953da92f9c5450e4deecae00a0]:
: [JourneyRecord(departure_time='2021-05-31T23:56:59', return_time='2021-06-01T00:07:14', departure_id='082', departure_name='Töölöntulli', return_id='113', return_name='Pasilan asema', distance='1870', duration='611')]

Departure seems to be a timestamp without a timezone, same for Return.  I'll just assume this is in UTC and move on.

Departure station id and return station id seem to strings, because they may start with a 0.  +Distance and duration are ints+.  Only duration is always an int, distance may be the empty string, or a float.  Let's set the distance to 0 if it is represented as an empty string.  Departure and return stations names seem to be simple strings.

Here's a parser to check if I'm right.

#+name: JourneyParser
#+begin_src python
<<JourneyRecordTuple>>

from datetime import datetime


class Journey:
    def __init__(
            self,
            departure_time,
            return_time,
            departure_station_id,
            departure_station_name,
            return_station_id,
            return_station_name,
            distance,
            duration
    ):
        self.departure_time = departure_time
        self.return_time = return_time
        self.departure_station_id = departure_station_id
        self.departure_station_name = departure_station_name
        self.return_station_id = return_station_id
        self.return_station_name = return_station_name
        self.distance = distance
        self.duration = duration


    def from_journey_record(record):
        return Journey(
            record.departure_time,
            record.return_time,
            record.departure_id,
            record.departure_name,
            record.return_id,
            record.return_name,
            record.distance,
            record.duration
        )

    @property
    def duration(self):
        return self._duration

    @duration.setter
    def duration(self, duration):
        if isinstance(duration, str):
            duration = int(duration)
        if not isinstance(duration, int):
            raise ValueError('???')
        self._duration = duration

    @property
    def distance(self):
        return self._distance

    @distance.setter
    def distance(self, distance):
        if isinstance(distance, str):
            if distance == '':
                distance = 0.0
            else:
                distance = float(distance)
        if not isinstance(distance, float):
            raise ValueError('???')
        self._distance = distance

    @property
    def return_station_name(self):
        return self._return_station_name

    @return_station_name.setter
    def return_station_name(self, return_station_name):
        if not isinstance(return_station_name, str):
            raise ValueError('???')
        self._return_station_name = return_station_name

    @property
    def return_station_id(self):
        return self._return_station_id

    @return_station_id.setter
    def return_station_id(self, return_station_id):
        if not isinstance(return_station_id, str):
            raise ValueError('???')
        self._return_station_id = return_station_id

    @property
    def departure_station_name(self):
        return self._departure_station_name

    @departure_station_name.setter
    def departure_station_name(self, departure_station_name):
        if not isinstance(departure_station_name, str):
            raise ValueError('???')
        self._departure_station_name = departure_station_name

    @property
    def departure_station_id(self):
        return self._departure_station_id

    @departure_station_id.setter
    def departure_station_id(self, departure_station_id):
        if not isinstance(departure_station_id, str):
            raise ValueError('???')
        self._departure_station_id = departure_station_id

    @property
    def return_time(self):
        return self._return_time

    @return_time.setter
    def return_time(self, return_time):
        if isinstance(return_time, str):
            return_time = datetime.fromisoformat(return_time)
        if not isinstance(return_time, datetime):
            raise ValueError('???')
        self._return_time = return_time

    @property
    def departure_time(self):
        return self._departure_time

    @departure_time.setter
    def departure_time(self, departure_time):
        if isinstance(departure_time, str):
            departure_time = datetime.fromisoformat(departure_time)
        if not isinstance(departure_time, datetime):
            raise ValueError('???')
        self._departure_time = departure_time

    def __repr__(self):
        return (
            'Journey('
            f'{str(self.departure_time)!r}, '
            f'{str(self.return_time)!r}, '
            f'{self.departure_station_id!r}, '
            f'{self.departure_station_name!r}, '
            f'{self.return_station_id!r}, '
            f'{self.return_station_name!r}, '
            f'{self.distance!r}, '
            f'{self.duration!r}'
            ')'
        )
#+end_src

We can check with the parser if all the data is now parseable.

#+header: :cache yes
#+header: :dir ../dataset/
#+begin_src python
import csv
import traceback

files = ['2021-05.csv', '2021-06.csv', '2021-07.csv']

<<JourneyParser>>

def try_parse(journey_record):
    try:
        return Journey.from_journey_record(journey_record)
    except Exception as e:
        print(traceback.format_exc(), end='')
        raise e

for f in files:
    reader = csv.reader(open(f, 'r', newline=''))
    # skip the header
    next(reader)
    list(map(try_parse, map(JourneyRecord._make, reader)))
#+end_src

#+RESULTS[6b314abaa957fbe31922465789c4ad91639619ee]:

Since this results in no output, we have a good enough parser for the data.

We can dump the data into a sqlite3 database.

#+header: :cache yes
#+header: :dir ../dataset/
#+begin_src python
import sqlite3

con = sqlite3.connect("journey.db")
cur = con.cursor()
query = """
CREATE TABLE IF NOT EXISTS journey(
  departure_time,
  return_time,
  departure_station_id,
  departure_station_name,
  return_station_id,
  return_station_name,
  distance,
  duration
)
"""
cur.execute(query)
tables = cur.execute("SELECT name from sqlite_master")

<<JourneyParser>>

import csv

files = ['2021-05.csv', '2021-06.csv', '2021-07.csv']
for f in files:
    reader = csv.reader(open(f, 'r', newline=''))
    # skip the header
    next(reader)
    for journey in map(
            Journey.from_journey_record,
            (map(JourneyRecord._make, reader))):
        cur.execute(
            "INSERT INTO journey VALUES(?, ?, ?, ?, ?, ?, ? ,?)",
            (journey.departure_time,
             journey.return_time,
             journey.departure_station_id,
             journey.departure_station_name,
             journey.return_station_id,
             journey.return_station_name,
             journey.distance,
             journey.duration)
        )
con.commit()
con.close()
#+end_src

#+RESULTS[a754e722ce2e73a672bfd92b059904ac186de661]:

And then look up stuff I guess.

#+header: :dir ../dataset
#+begin_src python
import sqlite3

con = sqlite3.connect("journey.db")
query = "SELECT * FROM journey LIMIT 1"
res=con.execute(query)
print(res.fetchone())
con.close()
#+end_src

#+RESULTS:
: ('2021-05-31 23:57:25', '2021-06-01 00:05:46', '094', 'Laajalahden aukio', '100', 'Teljäntie', 2043.0, 500)

** Write first implementation of frontend
:LOGBOOK:
CLOCK: [2023-04-02 Sun 10:22]--[2023-04-02 Sun 12:10] =>  1:48
:END:

Now that we have an sqlite database of the journey data, we can start implementing the frontend.  The “backend” used is going to be the sqlite database.

Spent the first 45 minutes fighting with setuptools because the directory I had the package in contained a space, great success.

Created project starter with command [[shell:cookiecutter gh:Pylons/pyramid-cookiecutter-starter]].  Project is in directory [[file:hcbf/]].

* Implementation

** The frontend
:PROPERTIES:
:header-args:python: :mkdirp yes :comments link
:END:

“The frontend” implements the [[id:3021535E-D457-4E21-B296-4035BCE2E439][journey list view]], the [[id:89C5ADDA-6E9D-485B-877F-2A47D765789A][station list view]], and the [[id:8B7AC0C5-E098-401C-936F-9B8AA51B8AB4][single station view]].  Any features involving a viewable map will be offloaded to the [[id:30261BAC-BA61-4A98-AD03-ED6B8EFD3515][map frontend]].

The frontend will be implemented using Python with the [[https://trypyramid.com][Pyramid]] web application framework.  It *must* be served as a containerized application using Cloud run.

See the list of requirements by importance:

+ [[id:1659CF90-34E8-4D6B-BBC8-B347089D2089][Must]]
+ [[id:27D03FC8-96B7-4F0B-94C0-A1E027CBADB0][Should]]
+ Could
+ [[id:B1773244-DBCA-4154-92DB-54D718912754][Wish]]

** The backend

** The database

** The datapump

** The map frontend
:PROPERTIES:
:ID:       30261BAC-BA61-4A98-AD03-ED6B8EFD3515
:END:
